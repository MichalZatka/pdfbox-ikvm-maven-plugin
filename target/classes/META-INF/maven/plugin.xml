<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.2 on 2014-09-05 -->

<plugin>
  <name>PdfBox IKVM Maven Plugin</name>
  <description>Plugin for generation of dlls for the pdfbox components using IKVM</description>
  <groupId>com.mz</groupId>
  <artifactId>pdfbox-ikvm-maven-plugin</artifactId>
  <version>1.0</version>
  <goalPrefix>pdfbox-ikvm</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <mojos>
    <mojo>
      <goal>ikvm</goal>
      <description>Goal which generates an IKVM dll containing all the jars on the classpath.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>com.mz.IkvmMavenMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>_project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>copyDllDepends</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Causes the plugin to copy {@code &lt;type&gt;dll&lt;/type&gt;} dependencies into the target directory
(minus their version information) so that they can be consistently referenced from your
{@code .csproj} file.</description>
        </parameter>
        <parameter>
          <name>copyDlls</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>DLLs to copy into the target directory. These can be absoulte paths, or relative to {@code
ikvmPath}.</description>
        </parameter>
        <parameter>
          <name>createStub</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Creates a zero-sized stub file in the event that {@code ikvm.path} is not set and we cannot
build a proper artifact. This allows builds that include an ios submodule to not fail even
when built in environments that cannot build the ios component. One can also solve this
problem with Maven profiles but it is extremely messy and foists a lot of complexity onto
the end user.</description>
        </parameter>
        <parameter>
          <name>dllPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The location of the standard library DLLs.</description>
        </parameter>
        <parameter>
          <name>dlls</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>Additional DLLs (beyond mscorlib, System and System.Core) to reference. These can be
absolute paths, or relative to {@code dllPath}.</description>
        </parameter>
        <parameter>
          <name>forceMono</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates that IKVM should be run via Mono rather than run directly as an executable. The
plugin defaults to running IKVM directly if we are running on Windows and using Mono
otherwise (on Mac and Linux), but this can force the use of Mono on Windows.</description>
        </parameter>
        <parameter>
          <name>ikvmArgs</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>Additional arguments to pass to IKVM.</description>
        </parameter>
        <parameter>
          <name>ikvmPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of the IKVM installation.</description>
        </parameter>
        <parameter>
          <name>ikvmcPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of the {@code ikvmc.exe} executable. Default: {@code ${ikvm.path}/bin/ikvmc.exe}.</description>
        </parameter>
        <parameter>
          <name>mavenRepoPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The location maven repository.</description>
        </parameter>
        <parameter>
          <name>onlyCode</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, only includes class files from the dependent jar files, ignoring any XML, image or
other files that might also be in the jar. If this is false (the default) all of those
resources files are included in the generated DLL.</description>
        </parameter>
        <parameter>
          <name>treatWarningsAsErrors</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, check the output of ikvmc for &quot;Warning&quot; statements and abort the build.</description>
        </parameter>
      </parameters>
      <configuration>
        <_project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <copyDllDepends implementation="boolean" default-value="false">${ikvm.copydlldepends}</copyDllDepends>
        <createStub implementation="boolean" default-value="false">${ikvm.createstub}</createStub>
        <dllPath implementation="java.io.File" default-value="/Developer/MonoTouch/usr/lib/mono/2.1">${dll.path}</dllPath>
        <forceMono implementation="boolean" default-value="false">${force.mono}</forceMono>
        <ikvmPath implementation="java.io.File">${ikvm.path}</ikvmPath>
        <ikvmcPath implementation="java.io.File">${ikvmc.path}</ikvmcPath>
        <mavenRepoPath implementation="java.io.File" default-value="">${maven.repo.path}</mavenRepoPath>
        <onlyCode implementation="boolean" default-value="false">${ikvm.onlycode}</onlyCode>
        <treatWarningsAsErrors implementation="boolean" default-value="false">${ikvm.treatWarningsAsErrors}</treatWarningsAsErrors>
      </configuration>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <type>jar</type>
      <version>2.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-project</artifactId>
      <type>jar</type>
      <version>2.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings</artifactId>
      <type>jar</type>
      <version>2.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-profile</artifactId>
      <type>jar</type>
      <version>2.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
      <type>jar</type>
      <version>2.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact-manager</artifactId>
      <type>jar</type>
      <version>2.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-repository-metadata</artifactId>
      <type>jar</type>
      <version>2.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-provider-api</artifactId>
      <type>jar</type>
      <version>1.0-beta-6</version>
    </dependency>
    <dependency>
      <groupId>backport-util-concurrent</groupId>
      <artifactId>backport-util-concurrent</artifactId>
      <type>jar</type>
      <version>3.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-registry</artifactId>
      <type>jar</type>
      <version>2.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-interpolation</artifactId>
      <type>jar</type>
      <version>1.11</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>1.5.15</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
      <type>jar</type>
      <version>2.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-container-default</artifactId>
      <type>jar</type>
      <version>1.0-alpha-9-stable-1</version>
    </dependency>
    <dependency>
      <groupId>classworlds</groupId>
      <artifactId>classworlds</artifactId>
      <type>jar</type>
      <version>1.1-alpha-2</version>
    </dependency>
  </dependencies>
</plugin>